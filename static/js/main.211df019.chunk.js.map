{"version":3,"sources":["components/BucketForm.js","components/Bucket.js","components/BucketList.js","App.js","index.js"],"names":["BucketForm","props","useState","input","setInput","eagerness","setEagerness","eagernessLevel","handleSubmit","e","preventDefault","onSubmit","id","Math","random","floor","text","handleChange","target","value","edit","console","log","className","type","placeholder","name","onChange","onClick","Bucket","setEdit","bucket","editBucketItem","map","item","index","isComplete","completeBucketItem","removeBucketItem","BucketList","saveditems","JSON","parse","localStorage","getItem","setBucket","useEffect","setItem","stringify","updatedBucket","itemsToRemoveFromBucket","filter","itemId","newValue","prev","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.211df019.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { FaAngleDown } from \"react-icons/fa\";  \n\nfunction BucketForm(props) {\n  const [input, setInput] = useState('');\n  let [eagerness, setEagerness] = useState('');\n\n  // Array used in the return statement below\n  const eagernessLevel = ['high', 'medium', 'low']\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!eagerness) {\n      eagerness = 'low';\n    }\n\n    props.onSubmit({\n      id: Math.random(Math.floor() * 1000),\n      text: input,\n      eagerness: eagerness,\n    });\n\n    setInput('');\n    setEagerness('');\n  };\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  // First we check to see if \"edit\" prop exists. If not, we render the normal form\n  // If the prop \"edit\" exists, we know to render the update form instead\n  return !props.edit ? (\n    <div>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Add to your bucket list\"\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness} is-flex`}>\n            {eagerness || 'Priority'}\n            <span className=\"icon is-small pl-2\">\n              <FaAngleDown />\n            </span>\n          </button>\n          <div className=\"dropdown-content\">\n            {/* Adds an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\n            <p onClick={() => setEagerness(eagernessLevel[0])}>Must do</p>\n            <p onClick={() => setEagerness(eagernessLevel[1])}>Want to do</p>\n            <p onClick={() => setEagerness(eagernessLevel[2])}>Take it or leave it</p>\n          </div>\n        </div>\n        <button className=\"bucket-button is-primary\">Add bucket list item</button>\n      </form>\n    </div>\n  ) : (\n    <div>\n      {console.log('props.edit', props.edit)}\n      <h3>Update entry: {props.edit.value}</h3>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder={props.edit.value}\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || 'Priority'}\n          </button>\n          <div className=\"dropdown-content\">\n            {/* Adds an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\n            <p onClick={() => setEagerness(eagernessLevel[0])}>Must do</p>\n            <p onClick={() => setEagerness(eagernessLevel[1])}>Want to do</p>\n            <p onClick={() => setEagerness(eagernessLevel[2])}>Take it or leave it</p>\n          </div>\n        </div>\n        <button className=\"bucket-button\">Update</button>\n      </form>\n    </div>\n  );\n}\n\nexport default BucketForm;\n","import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\n\nfunction Bucket(props) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: '',\n    eagerness: '',\n  });\n  console.log('edit', edit);\n  console.log('props.bucket', props.bucket);\n\n  const submitUpdate = (value) => {\n    // TODO: Write logic to update the `edit` value in state after a user updates an entry in the list\n    // TODO: Set the key:value pairs in the `edit` object back to empty strings\n    console.log('value2', value);\n    props.editBucketItem(edit.id, value);\n    setEdit({\n      id: null,\n      value: '',\n      eagerness: '',\n    })\n  };\n\n  // If the user is attempting to edit an item, render the bucket form with the edit variable passed as a prop\n  if (edit.id) {\n    console.log('Edit if statement entered');\n    return <BucketForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return props.bucket.map((item, index) => (\n    // TODO: Add a className of `bucket row complete ${item.eagerness}` for completed items, and `bucket-row ${item.eagerness}` for non-completed items\n    // TODO: Add a key attribute set to the value of the index position\n    // Hint: use a ternary operator\n    < div className={item.isComplete === `complete` ? `bucket row complete ${item.eagerness}` : `bucket-row ${item.eagerness}`} key={index} >\n      {/* // TODO: Add an onClick event that invokes the `completeBucketItem` method passing the item id as a argument */}\n      <div key={item.id} onClick={() => props.completeBucketItem(item.id)}>\n        {/* TODO: Add the item text here */}\n        {item.text}\n      </div>\n      <div className=\"icons\">\n        {/* // TODO: Add an onClick event update the `edit` object with the `id`, `value`, and `eagerness` properties */}\n        <p onClick={() => {\n          setEdit({\n            id: item.id,\n            value: item.text,\n            eagerness: item.eagerness,\n          })\n        }}> ‚úèÔ∏è</p>\n        {/* TODO: Add an onClick event that will invoke the removeBucketItem method passing in the `item.id` */}\n        <p onClick={() => props.removeBucketItem(item.id)}> üóëÔ∏è</p>\n      </div>\n    </div >\n  ));\n}\n\nexport default Bucket;\n","import React, { useState, useEffect } from 'react';\nimport BucketForm from './BucketForm';\nimport Bucket from './Bucket';\n\nfunction BucketList() {\n  // Gets the saved items from local storage\n  const saveditems = JSON.parse(localStorage.getItem('items'));\n  const [bucket, setBucket] = useState(saveditems || []);\n\n  // Function to add a bucket list item\n  const addBucketItem = (item) => {\n    if (!item.text) {\n      return;\n    }\n\n    // Adds the new bucket item to the bucket state variable\n    setBucket([...bucket, item]);\n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map((item) => {\n\n      // Marks an item as complete or incomplete when invoked\n      if (item.id === id) {\n        item.isComplete = !item.isComplete;\n      }\n      return item;\n    });\n    setBucket(updatedBucket);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = (id) => {\n    // Returns an array of items that don't contain the ID passed to this function\n    const itemsToRemoveFromBucket = [...bucket].filter((item) => item.id !== id);\n    // Bucket state variable updated\n    setBucket(itemsToRemoveFromBucket);\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue, eagernessLevel) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      console.log('no new Value text');\n      return;\n    }\n    console.log('Did not enter if statement');\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the id of the item that was clicked and if so, we set it to a new value\n    setBucket((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  // useEffect hook used to save and get items from local storage\n  // The items the user inputs to the list will persist\n  useEffect(() => {\n    const bucket = JSON.parse(localStorage.getItem('items'));\n    if (bucket) {\n      setBucket(bucket);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('items', JSON.stringify(bucket));\n  }, [bucket]);\n\n  return (\n    <div>\n      <h1 className=\"is-size-4\">What is on your bucket list?</h1>\n      <BucketForm onSubmit={addBucketItem} />\n      <Bucket\n        bucket={bucket}\n        completeBucketItem={completeBucketItem}\n        removeBucketItem={removeBucketItem}\n        editBucketItem={editBucketItem}\n      ></Bucket>\n    </div>\n  );\n}\n\nexport default BucketList;\n","import './App.css';\nimport BucketList from './components/BucketList';\nimport 'bulma/css/bulma.css'\n\nfunction App() {\n  return (\n    <div className=\"bucket-app box has-background-dark\">\n      <BucketList />m\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}